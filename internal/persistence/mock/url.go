// Code generated by mockery. DO NOT EDIT.

package mock

import (
	context "context"

	domain "github.com/kodeyeen/shortify/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// URLRepository is an autogenerated mock type for the Repository type
type URLRepository struct {
	mock.Mock
}

type URLRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *URLRepository) EXPECT() *URLRepository_Expecter {
	return &URLRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, u
func (_m *URLRepository) Add(ctx context.Context, u *domain.URL) (int64, error) {
	ret := _m.Called(ctx, u)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.URL) (int64, error)); ok {
		return rf(ctx, u)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.URL) int64); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.URL) error); ok {
		r1 = rf(ctx, u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// URLRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type URLRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - u *domain.URL
func (_e *URLRepository_Expecter) Add(ctx interface{}, u interface{}) *URLRepository_Add_Call {
	return &URLRepository_Add_Call{Call: _e.mock.On("Add", ctx, u)}
}

func (_c *URLRepository_Add_Call) Run(run func(ctx context.Context, u *domain.URL)) *URLRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.URL))
	})
	return _c
}

func (_c *URLRepository_Add_Call) Return(_a0 int64, _a1 error) *URLRepository_Add_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *URLRepository_Add_Call) RunAndReturn(run func(context.Context, *domain.URL) (int64, error)) *URLRepository_Add_Call {
	_c.Call.Return(run)
	return _c
}

// FindByAlias provides a mock function with given fields: ctx, alias
func (_m *URLRepository) FindByAlias(ctx context.Context, alias string) (*domain.URL, error) {
	ret := _m.Called(ctx, alias)

	if len(ret) == 0 {
		panic("no return value specified for FindByAlias")
	}

	var r0 *domain.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.URL, error)); ok {
		return rf(ctx, alias)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.URL); ok {
		r0 = rf(ctx, alias)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, alias)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// URLRepository_FindByAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByAlias'
type URLRepository_FindByAlias_Call struct {
	*mock.Call
}

// FindByAlias is a helper method to define mock.On call
//   - ctx context.Context
//   - alias string
func (_e *URLRepository_Expecter) FindByAlias(ctx interface{}, alias interface{}) *URLRepository_FindByAlias_Call {
	return &URLRepository_FindByAlias_Call{Call: _e.mock.On("FindByAlias", ctx, alias)}
}

func (_c *URLRepository_FindByAlias_Call) Run(run func(ctx context.Context, alias string)) *URLRepository_FindByAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *URLRepository_FindByAlias_Call) Return(_a0 *domain.URL, _a1 error) *URLRepository_FindByAlias_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *URLRepository_FindByAlias_Call) RunAndReturn(run func(context.Context, string) (*domain.URL, error)) *URLRepository_FindByAlias_Call {
	_c.Call.Return(run)
	return _c
}

// NewURLRepository creates a new instance of URLRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewURLRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *URLRepository {
	mock := &URLRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
