// Code generated by mockery. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AliasProvider is an autogenerated mock type for the AliasProvider type
type AliasProvider struct {
	mock.Mock
}

type AliasProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *AliasProvider) EXPECT() *AliasProvider_Expecter {
	return &AliasProvider_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function with given fields: ctx, original
func (_m *AliasProvider) Generate(ctx context.Context, original string) (string, error) {
	ret := _m.Called(ctx, original)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, original)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, original)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, original)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AliasProvider_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type AliasProvider_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - ctx context.Context
//   - original string
func (_e *AliasProvider_Expecter) Generate(ctx interface{}, original interface{}) *AliasProvider_Generate_Call {
	return &AliasProvider_Generate_Call{Call: _e.mock.On("Generate", ctx, original)}
}

func (_c *AliasProvider_Generate_Call) Run(run func(ctx context.Context, original string)) *AliasProvider_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AliasProvider_Generate_Call) Return(_a0 string, _a1 error) *AliasProvider_Generate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AliasProvider_Generate_Call) RunAndReturn(run func(context.Context, string) (string, error)) *AliasProvider_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// NewAliasProvider creates a new instance of AliasProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAliasProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *AliasProvider {
	mock := &AliasProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
