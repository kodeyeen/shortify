// Code generated by mockery. DO NOT EDIT.

package urlmock

import (
	context "context"

	dto "github.com/kodeyeen/shortify/internal/dto"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the URLService type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, req
func (_m *Service) Create(ctx context.Context, req *dto.CreateURLRequest) (*dto.CreateURLResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *dto.CreateURLResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateURLRequest) (*dto.CreateURLResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateURLRequest) *dto.CreateURLResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CreateURLResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.CreateURLRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Service_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.CreateURLRequest
func (_e *Service_Expecter) Create(ctx interface{}, req interface{}) *Service_Create_Call {
	return &Service_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *Service_Create_Call) Run(run func(ctx context.Context, req *dto.CreateURLRequest)) *Service_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.CreateURLRequest))
	})
	return _c
}

func (_c *Service_Create_Call) Return(_a0 *dto.CreateURLResponse, _a1 error) *Service_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Create_Call) RunAndReturn(run func(context.Context, *dto.CreateURLRequest) (*dto.CreateURLResponse, error)) *Service_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAlias provides a mock function with given fields: ctx, req
func (_m *Service) GetByAlias(ctx context.Context, req *dto.GetURLByAliasRequest) (*dto.GetURLByAliasResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetByAlias")
	}

	var r0 *dto.GetURLByAliasResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetURLByAliasRequest) (*dto.GetURLByAliasResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetURLByAliasRequest) *dto.GetURLByAliasResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetURLByAliasResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.GetURLByAliasRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetByAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAlias'
type Service_GetByAlias_Call struct {
	*mock.Call
}

// GetByAlias is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.GetURLByAliasRequest
func (_e *Service_Expecter) GetByAlias(ctx interface{}, req interface{}) *Service_GetByAlias_Call {
	return &Service_GetByAlias_Call{Call: _e.mock.On("GetByAlias", ctx, req)}
}

func (_c *Service_GetByAlias_Call) Run(run func(ctx context.Context, req *dto.GetURLByAliasRequest)) *Service_GetByAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.GetURLByAliasRequest))
	})
	return _c
}

func (_c *Service_GetByAlias_Call) Return(_a0 *dto.GetURLByAliasResponse, _a1 error) *Service_GetByAlias_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetByAlias_Call) RunAndReturn(run func(context.Context, *dto.GetURLByAliasRequest) (*dto.GetURLByAliasResponse, error)) *Service_GetByAlias_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
